# -*- coding: utf-8 -*-
"""Milestone2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0hBA6sKf_0a1z-TGd3-zTpsf2yPsm6A
"""

import tensorflow as tf
from google.colab import files

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv

np.random.seed(5)

train_dataframe = pd.read_csv('/content/roberta.train.csv')
test_dataframe = pd.read_csv('/content/roberta.test.csv')
eval_dataframe = pd.read_csv('/content/roberta.eval.anon.csv')

train_x = train_dataframe.iloc[:, :-1]
# barr = [[1]] * train_dataframe.shape[0]
# index = -1
# train_x=np.append(train_x,barr,axis=1)
train_y = train_dataframe.iloc[:, -1]
# train_y[train_y == 0] = -1

test_x = test_dataframe.iloc[:, :-1]
# barr = [[1]] * test_dataframe.shape[0]
# index = -1
# test_x=np.append(test_x,barr,axis=1)
test_y = test_dataframe.iloc[:, -1]
# test_y[test_y == 0] = -1

eval_x = eval_dataframe.iloc[:, :-1]
# barr = [[1]] * eval_dataframe.shape[0]
# index = -1
# eval_x = np.append(eval_x,barr,axis=1)
eval_y = eval_dataframe.iloc[:, -1]
# eval_y[eval_y == 0] = -1

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(768,)),
  tf.keras.layers.Dense(16, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(32, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(64, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(128, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(250, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(256, activation='elu'),
  tf.keras.layers.Dropout(0.2),
  # tf.keras.layers.Dense(512, activation='elu'),
  # tf.keras.layers.Dropout(0.2),

 
  # tf.keras.layers.Dense(512, activation='elu'),
  # tf.keras.layers.Dense(512, activation='elu'),
  # tf.keras.layers.Dense(512, activation='elu'),
  # tf.keras.layers.Dense(512, activation='elu'),
  # tf.keras.layers.Dense(1, activation='elu'),
  # tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(1,activation = "sigmoid")

])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(train_x, train_y, epochs=20)

model.evaluate(test_x,  test_y, verbose=2)

arr = model.predict(eval_x)

eval_pred = []
for item in arr:
  if(item[0] >0.5):
    eval_pred.append(1)
  else:
    eval_pred.append(0)
print(eval_pred)

predictions_eval = pd.Series(eval_pred)
predictions_eval

predictions_eval.to_csv("/content/evals_final_milestone_2_roberta.csv")
predictions_eval.value_counts()